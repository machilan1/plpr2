package {{.DomainL}}api

import (
    "time"

    "{{.Module}}/internal/business/domain/{{.DomainL}}"
    "{{.Module}}/internal/framework/validate"
)

// App{{.DomainU}} represents an individual {{.DomainL}}.
type App{{.DomainU}} struct {
    ID        int       `json:"id"`
    CreatedAt time.Time `json:"createdAt"`
    UpdatedAt time.Time `json:"updatedAt"`
}

func toApp{{.DomainU}}({{.DomainVar}} {{.DomainL}}.{{.DomainU}}) App{{.DomainU}} {
    return App{{.DomainU}}{
        ID:        {{.DomainVar}}.ID,
        CreatedAt: {{.DomainVar}}.CreatedAt,
        UpdatedAt: {{.DomainVar}}.UpdatedAt,
    }
}

func toApp{{.DomainPluralU}}({{.DomainVars}} []{{.DomainL}}.{{.DomainU}}) []App{{.DomainU}} {
    items := make([]App{{.DomainU}}, len({{.DomainVars}}))
    for i, {{.DomainVar}} := range {{.DomainVars}} {
        items[i] = toApp{{.DomainU}}({{.DomainVar}})
    }

    return items
}

// =============================================================================

type AppNew{{.DomainU}} struct {
}

func toCoreNew{{.DomainU}}(app AppNew{{.DomainU}}) ({{.DomainL}}.New{{.DomainU}}, error) {
    {{.DomainVar}} := {{.DomainL}}.New{{.DomainU}}{
    }

    return {{.DomainVar}}, nil
}

func (app AppNew{{.DomainU}}) Validate() error {
    if err := validate.Check(app); err != nil {
        return err
    }

    return nil
}

// =============================================================================

type AppUpdate{{.DomainU}} struct {
}

func toCoreUpdate{{.DomainU}}(app AppUpdate{{.DomainU}}) ({{.DomainL}}.Update{{.DomainU}}, error) {
    core := {{.DomainL}}.Update{{.DomainU}}{
    }

    return core, nil
}

func (app AppUpdate{{.DomainU}}) Validate() error {
    if err := validate.Check(app); err != nil {
        return err
    }

    return nil
}
